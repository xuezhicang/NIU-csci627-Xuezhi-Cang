/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry2 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry3 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry4 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry5 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry6 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry7 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry8 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry9 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry10 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry11 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry12 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry13 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry14 = /* color: #23cba7 */ee.Geometry.MultiPoint(),
    geometry15 = /* color: #23cba7 */ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Adds a band containing image date as years since 1991.
function createTimeBand_collection(img) {
  var year = ee.Date(img.get('system:time_start')).get('year').subtract(2000);
  return ee.Image(year).byte().addBands(img);
}

// put population density and nighttime light in the collection
var pop_collection = ee.ImageCollection('CIESIN/GPWv4/unwpp-adjusted-population-density')
    .select('population-density')
    .filterDate('2000-01-01', '2015-12-31')
    .map(createTimeBand_collection);
var light_collection = ee.ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')
    .filterDate('2000-01-01', '2015-12-31')
    .select('stable_lights')
    .map(createTimeBand_collection);
    
    
Map.addLayer(pop_collection,{},'population_lyr');   
//Map.addLayer(light_collection,{},'light_lyr');   



var drawingTools = Map.drawingTools();
drawingTools.setShown(false);
var ROI_Geometry =
    ui.Map.GeometryLayer({geometries: null, name: 'geometry', color: '23cba7'});

drawingTools.layers().add(ROI_Geometry);


function clearGeometry() {
  var layers = drawingTools.layers();
  layers.get(0).geometries().remove(layers.get(0).geometries().get(0));
}

function drawPolygon() {
  clearGeometry();
  drawingTools.setShape('polygon');
  drawingTools.draw();
}
function drawPoint() {
  clearGeometry();
  drawingTools.setShape('point');
  drawingTools.draw();
}
var controlPanel = ui.Panel({
  widgets: [
    ui.Label('1. Select a drawing mode.'),

    ui.Button({
      label: ' Polygon',
      onClick: drawPolygon,
      style: {stretch: 'horizontal'}
    }),
    ui.Button({
      label:  ' Point',
      onClick: drawPoint,
      style: {stretch: 'horizontal'}
    }),
    ui.Label('2. Draw a geometry.'),
    ui.Label('3. Wait for chart to draw.'),
    ui.Label(
        '4. Repeat 1-3 or edit/move\ngeometry for a new chart.',
        {whiteSpace: 'pre'})
  ],
  style: {position: 'bottom-left'},
  layout: null,
});

Map.add(controlPanel);


var map_layer = {
  Map1: ["map1"],
  Map2: ["map2"],
};

var select = ui.Select({
  items: Object.keys(map_layer),
  onChange: function(key) {
    print(map_layer[key][0]);
  }
});


select.setPlaceholder('Choose a layer...');

Map.add(select);


var panel = ui.Panel({style: {position: 'top-right'}});
panel.style().set({
  width: '400px',
  position: 'right'
});
Map.add(panel);